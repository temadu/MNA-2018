import cv2
import math
import os
import functools
import shutil

def checkWebcamAvailability():
    cam = cv2.VideoCapture(0)
    return cam.isOpened()

def takeTempPic():
    print("Press the SPACEBAR to take a picture. Say cheese!!")
    cam = cv2.VideoCapture(0)

    if cam.isOpened():
        cam.set(3, 300)
        cam.set(4, 400)
        W = 300.
        while True:
            ret, frame = cam.read()
            gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
            flipped = cv2.flip(gray, 1)
            newimg = cv2.resize(flipped, (200, 150))

            # cv2.imshow("Original", gray)
            # cv2.imshow("Editerino", newimg)
            y1 = math.floor(len(newimg)/2-112/2)
            y2 = math.floor(len(newimg)/2+112/2)
            x1 = math.floor(len(newimg[0])/2-92/2)
            x2 = math.floor(len(newimg[0])/2+92/2)
            crop = newimg[y1:y2, x1:x2]
            cv2.imshow("Croper", crop)
            if not ret:
                break
            k = cv2.waitKey(1)
            if k % 256 == 32:
                # SPACE pressed
                print(crop)
                img_name = "./picTaken.pgm"
                cv2.imwrite("tempFile.pgm", crop)
                with open("tempFile.pgm", 'rb') as f:
                    newFile = open(img_name, 'wb')
                    while True:
                        b = f.read(1)
                        if not b:
                            # eof
                            break
                        if f.tell() < 3 or f.tell() > (len("# Generated by OpenCV 3.4.3")+3):
                            newFile.write(b)
                    newFile.close()
                    f.close()
                os.remove("tempFile.pgm")
                break
    cam.release()
    cv2.destroyAllWindows()
    return "./picTaken.pgm";

def deleteTempPic():
    if os.path.exists("./picTaken.pgm"):
        os.remove("./picTaken.pgm")

def addPerson(name):
    print("Press the SPACEBAR to take a picture. You need to take 10 pictures, try to change it up a little bit, or make funny faces!!")
    cam = cv2.VideoCapture(0)

    if cam.isOpened():
        cam.set(3, 300)
        cam.set(4, 400)
        img_counter = 1
        newPersonID = getLastInDB()+1

        W = 300.
        while True:
            ret, frame = cam.read()
            gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
            flipped = cv2.flip(gray, 1)
            newimg = cv2.resize(flipped, (200, 150))

            # cv2.imshow("Original", gray)
            # cv2.imshow("Editerino", newimg)
            y1 = math.floor(len(newimg)/2-112/2)
            y2 = math.floor(len(newimg)/2+112/2)
            x1 = math.floor(len(newimg[0])/2-92/2)
            x2 = math.floor(len(newimg[0])/2+92/2)
            crop = newimg[y1:y2, x1:x2]
            cv2.imshow("Croper", newimg[y1:y2, x1:x2])
            if not ret:
                break
            k = cv2.waitKey(1)

            if img_counter == 11:
                # ESC pressed
                print("That's the last picture. Closing...")
                break
            elif k % 256 == 32:
                # SPACE pressed
                img_name = "./db/s{}/{}.pgm".format(newPersonID, img_counter)
                cv2.imwrite("tempFile.pgm", crop)
                if not os.path.exists("./db"):
                    os.mkdir("./db")
                if not os.path.exists("./db/s{}".format(newPersonID)):
                    os.mkdir("./db/s{}".format(newPersonID))
                with open("tempFile.pgm", 'rb') as f:
                    newFile = open(img_name, 'wb')
                    while True:
                        b = f.read(1)
                        if not b:
                            # eof
                            break
                        if f.tell() < 3 or f.tell() > (len("# Generated by OpenCV 3.4.3")+3):
                            newFile.write(b)
                    newFile.close()
                    f.close()
                os.remove("tempFile.pgm")
                if img_counter == 6:
                    print("Took photo {}. That was a good one!".format(img_counter))
                else:
                    print("Took photo {}.".format(img_counter))
                # print(crop)
                img_counter += 1
    cam.release()
    cv2.destroyAllWindows()
    
def takePics():
    cam = cv2.VideoCapture(0)

    if cam.isOpened():
        cam.set(3, 300)
        cam.set(4, 400)
        img_counter = 0
        W = 300.
        while True:
            ret, frame = cam.read()
            gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
            flipped = cv2.flip(gray, 1)
            newimg = cv2.resize(flipped, (200, 150))
            
            # cv2.imshow("Original", gray)
            # cv2.imshow("Editerino", newimg)
            y1 = math.floor(len(newimg)/2-112/2)
            y2 = math.floor(len(newimg)/2+112/2)
            x1 = math.floor(len(newimg[0])/2-92/2)
            x2 = math.floor(len(newimg[0])/2+92/2)
            crop = newimg[y1:y2, x1:x2]
            cv2.imshow("Croper", newimg[y1:y2, x1:x2])
            if not ret:
                break
            k = cv2.waitKey(1)

            if k % 256 == 27:
                # ESC pressed
                print("Escape hit, closing...")
                break
            elif k % 256 == 32:
                # SPACE pressed
                img_name = "./imageOutput/{}.pgm".format(img_counter)
                cv2.imwrite("tempFile.pgm", crop)
                if not os.path.exists("./imageOutput"):
                    os.mkdir("./imageOutput")
                with open("tempFile.pgm", 'rb') as f:
                    newFile = open(img_name, 'wb')
                    while True:
                        b = f.read(1)
                        if not b:
                            # eof
                            break
                        if f.tell() < 3 or f.tell() > (len("# Generated by OpenCV 3.4.3")+3):
                            newFile.write(b)
                    newFile.close()
                    f.close()
                os.remove("tempFile.pgm")
                print("{} written!".format(img_name))
                # print(crop)
                img_counter+=1
    cam.release()
    cv2.destroyAllWindows()

def getLastInDB():
    print(os.listdir('./db/'))
    return int(functools.reduce(biggestDirReducer, os.listdir('./db/'))[1:])
def biggestDirReducer(a,b):
    if(int(a[1:]) > int(b[1:])):
        return a
    return b

def listDB():
    persons = [x for x in os.listdir('./db/') if os.path.isdir('./db/' + x)]
    persons.sort(key=dirSorter)
    print("LISTING PEOPLE IN DB")
    for dir in persons:
        print('{}: {}'.format(dir[1:],"TITIANO"))
def dirSorter(e):
    return int(e[1:])
def removePerson(id):
    if os.path.exists("./db/s{}".format(id)):
        shutil.rmtree('./db/s{}'.format(id), ignore_errors=True)
        print("REMOVED PERSON {} FROM DB".format(id))
    else:
        print("PERSON {} DOES NOT EXIST".format(id))
